<?php

use Mockery as m;
use Recca0120\Library\Str;

class NativeTest extends PHPUnit_Framework_TestCase
{
    public function tearDown()
    {
        m::close();
    }

    public function test_trim()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = '  foo  ';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        $str = new Str($str);

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('foo', (string) $str->trim());
        $this->assertSame('foo  ', (string) $str->ltrim());
        $this->assertSame('  foo', (string) $str->rtrim());

        $this->assertSame('f', (string) $str->trim()->trim('o'));
        $this->assertSame('oo  ', (string) $str->ltrim()->ltrim('f'));
        $this->assertSame('  f', (string) $str->rtrim()->rtrim('o'));
    }

    public function test_to_upper_case()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('FOO', (string) (new Str('foo'))->toUpperCase());
    }

    public function test_to_lower_case()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('foo', (string) (new Str('FOO'))->toLowerCase());
    }

    public function test_replace()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'foo';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('baa', (string) (new Str($str))->replace(['f' => 'b', 'o' => 'a']));
        $this->assertSame('bar', (string) (new Str($str))->replace('/foo/', function ($m) {
            $this->assertSame('foo', $m[0]);

            return 'bar';
        }));
        $this->assertSame('bar', (string) (new Str($str))->replace('/foo/', 'bar'));
    }

    public function test_match()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';
        $pattern = '/[a-z]?/';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame([['a', 'b', 'c', 'd', 'e', 'f', '']], (new Str($str))->match($pattern));
        $this->assertFalse((new Str('123'))->match('/[a-z]/'));
    }

    public function test_encoding()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame(mb_convert_encoding($str, 'big5'), (string) (new Str($str))->encoding('big5'));
    }

    public function test_length()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame(6, (new Str($str))->length());
    }

    public function test_substr()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('bcd', (string) (new Str($str))->substr(1, 3));
    }

    public function test_explode()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame(['a', 'cdef'], (new Str($str))->explode('b'));
    }

    public function test_prepend()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('z'.$str, (string) (new Str($str))->prepend('z'));
    }

    public function test_append()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame($str.'z', (string) (new Str($str))->append('z'));
    }

    public function test_base64_encode()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = 'abcdef';

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame(base64_encode($str), (string) (new Str($str))->base64Encode());
    }

    public function test_base64_decode()
    {
        /*
        |------------------------------------------------------------
        | Arrange
        |------------------------------------------------------------
        */

        $str = base64_encode('abcdef');

        /*
        |------------------------------------------------------------
        | Act
        |------------------------------------------------------------
        */

        /*
        |------------------------------------------------------------
        | Assert
        |------------------------------------------------------------
        */

        $this->assertSame('abcdef', (string) (new Str($str))->base64Decode());
    }
}
